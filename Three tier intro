the first organization in my career was dealing with one small Point of Sales (POS) project. It was a Windows application and there was no layered architecture.
We developers started to write all code in the Windows Forms Application. The problem started after a few days. How? When our manager announced that we need to 
develop one web version of the same product. Again we started to develop web pages from scratch and started to write all code. A total mess.

So, this is the problem and the solution is tierd architecture. If we separate our code by layers then changes in one layer will not affect another very much. 
Tomorrow if the business demands, we can change the UI very quickly by using existing code.

Difference between tier and layer

It is a confusing question for beginners. A few think that both are the same. But they are not the same. Tier represents multiple hardware boxes. 
In other words the components are physically separated into multiple machines. But in the case of layers all components are in the same system.

What are the Layers?

Theoretically it is N-tier architecture. So, we can create as many layers as possible but basically people classify code in three categories and put them in three layers. 
So, for this article we will consider N-tier architecture as 3-tier architecture and try to implement one sample application.

Let's explain each and every layer first.

Presentation Layer/ UI Layer

This is the top-most layer of the application where the user performs their activity. Let's take the example of any application where the user needs to fill up a form.
This form is nothing but the Presentation Layer. In Windows applications Windows Forms are the Presentation Layer and in web applications the web form belongs to the
Presentation Layer. Basically the user's input validation and rule processing is done in this layer.

Business Layer

This is on top of the Presentation Layer. As the name suggests, most of the business operations are performed here. For example, after collecting form data we want
to validate them with our custom business rule. Basically we define classes and business entities in this layer.

Data Access Layer

On top of the Business Logic Layer is the Data Access Layer. It contains methods that help the business layer to connect with the database and perform CRUD operations
. Generally all database related code and stuff belongs to the Data Access Layer. Sometimes people use a platform-independent Data Access Layer to fetch data from
various database vendors.

Let's Implement

Before starting with an example, one more question needs to be clarified. How will we pass data from one layer to another layer? In other words, in which
form is the data passed?

There are many solutions for this problem. For our example, we will pass data using function parameters.
In this example, we will implement one small Windows application to fetch data from the database using 3-tier architecture. 
In this example, we will read data from a single "Person" Table.
